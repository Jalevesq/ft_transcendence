datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Add later
}

generator client {
  provider = "prisma-client-js"
}

model user {
  userID   Int    @id @default(autoincrement())
  nickname String @unique
  email    String @unique
  avatar   String

  token                 String          @unique
  status                status
  admin                 Boolean         @default(false)
  winnerMatchHistory    match_history[] @relation("Winner")
  loserMatchHistory     match_history[] @relation("Loser")
  friendList            friend_list[]   @relation("userFriend")
  friends               friend_list[]   @relation("Friendof")
  blockList             block_list[]    @relation("userBlock")
  blocked               block_list[]    @relation("blockedUser")
  messageSentPrivate    private_chat[]  @relation("privateSent")
  messageReceivePrivate private_chat[]  @relation("privateReceive")
  channelUser           channel_user[]
  channelMessageSent    channel_chat[]
}

model match_history {
  matchID     Int      @id @default(autoincrement())
  winnerScore Int
  loserScore  Int
  dateOfMatch DateTime
  winner      user     @relation("Winner", fields: [winnerName], references: [nickname])
  winnerName  String
  loser       user     @relation("Loser", fields: [loserName], references: [nickname])
  loserName   String
}

model friend_list {
  id           Int     @id @default(autoincrement())
  user         user    @relation("userFriend", fields: [userString], references: [nickname])
  userString   String
  friend       user    @relation("Friendof", fields: [friendString], references: [nickname])
  friendString String
  status       request
}

model block_list {
  id               Int    @id @default(autoincrement())
  currentUser      user   @relation("userBlock", fields: [userString], references: [nickname])
  userString       String
  blockedUser      user   @relation("blockedUser", fields: [blockedUserSting], references: [nickname])
  blockedUserSting String
}

model private_chat {
  id             Int      @id @default(autoincrement())
  sender         user     @relation("privateSent", fields: [senderString], references: [nickname])
  senderString   String
  receiver       user     @relation("privateReceive", fields: [receiverString], references: [nickname])
  receiverString String
  message        String
  timestamp      DateTime
}

model channel {
  channelName String         @id // double check later if good idea
  type        channel_type
  password    String?        @default("") //NULLABLE BABY
  channelUser channel_user[]
  channelChat channel_chat[]
}

model channel_user {
  id         Int     @id @default(autoincrement())
  channel    channel @relation(fields: [channelID], references: [channelName])
  channelID  String
  userId     user    @relation(fields: [userString], references: [nickname])
  userString String
  admin      Boolean @default(false)
}

model channel_chat {
  id         Int      @id @default(autoincrement())
  channel    channel  @relation(fields: [channelID], references: [channelName])
  channelID  String
  sender     user     @relation(fields: [senderName], references: [nickname])
  senderName String
  message    String
  timeStamp  DateTime
}

enum status {
  Online
  Offline
  Ingame
  Busy
}

enum request {
  Pending
  Accepted
  Refused
}

enum channel_type {
  Private
  Public
  Protected
}
